//// ==========================================================================
/// @group Tools
/// Color
//// ==========================================================================

@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:math";

@use "@glsass/settings/settings.colors" as colors;

/// @return {Color} - Lighten version of the color
@function tint($color, $level: 1, $interval: 8%) {
  @return color.scale($color, $lightness: $level * $interval);
}

/// @return {Color} - Darken version of the color
@function shade($color, $level: 1, $interval: 8%) {
  @return color.scale($color, $lightness: -1 * $level * $interval);
}

/// Color contrast from the YIQ algo
/// @deprecated
/// @param {Color} $color - Color to control to define best contrast
/// @param {Color} $dark [$g-color-black] - Dark color - black by default
/// @param {Color} $light [$g-color-white] - Light color - white by default
/// @param {Number} $threshold [150]
/// @return {Color} Color with better contrast ratio
@function yiq-contrast(
  $color,
  $dark: colors.$g-color-text,
  $light: colors.$g-color-white,
  $threshold: 128
) {
  @warn "The `yiq-contrast()` function has been deprecated as of v1.1.0. It will be removed entirly in v2.";

  $_yiq-contrasted-threshold: $threshold;

  $r: color.red($color);
  $g: color.green($color);
  $b: color.blue($color);

  $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

  @return if($yiq >= $_yiq-contrasted-threshold, $dark, $light);
}
