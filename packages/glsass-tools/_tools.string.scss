//// ==========================================================================
/// @group Tools
/// String
//// ==========================================================================

@use "sass:string";

/// Characters which are escaped by the escape-svg function
/// @access private
$_escaped-characters: (("<", "%3c"), (">", "%3e"), ("#", "%23"));

/// Replace `$search` with `$replace` in `$string`
/// Used on our SVG icon backgrounds for custom forms.
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function replace($string, $search, $replace: "") {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      replace(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

/// Escape special characters from a SVG data URL to use it as a background
/// image.
/// @param {String} $string - SVG String
/// @return {String} - Escaped SVG string as data URL
/// @link https://codepen.io/kevinweber/pen/dXWoRw
@function escape-svg($string) {
  @if not string.index($string, "data:image/svg+xml") {
    @error "Invalid string parsed for a svg.";
  }

  @each $char, $encoded in $_escaped-characters {
    $string: replace($string, $char, $encoded);
  }

  @return $string;
}

/// Casts a string into a number
/// @since v1.1.0
/// @author @HugoGiraudel
/// @link https://hugogiraudel.com/2014/01/15/casting-a-string-to-a-number-in-sass/
/// @param {String | Number} $value - Value to be parsed
/// @return {Number} Parsed value
@function to-number($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    @error "Value for `to-number` should be a number or a string. Passed `#{$value}` as value";
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == "-";
  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if not(index(map-keys($numbers), $character) or $character == ".") {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i));
    }

    @if $character == "." {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}
